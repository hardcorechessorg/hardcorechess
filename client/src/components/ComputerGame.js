import React, { useState, useEffect } from 'react';
import { Chessboard } from 'react-chessboard';
import { Chess } from 'chess.js';
import { useNavigate } from 'react-router-dom';

const ComputerGame = () => {
  const navigate = useNavigate();
  const [game, setGame] = useState(new Chess());
  const [difficulty, setDifficulty] = useState(5);
  const [isGameOver, setIsGameOver] = useState(false);
  const [result, setResult] = useState(null);
  const [isThinking, setIsThinking] = useState(false);
  const [playerColor, setPlayerColor] = useState('w'); // w - –±–µ–ª—ã–µ, b - —á–µ—Ä–Ω—ã–µ

  useEffect(() => {
    startNewGame();
  }, []);

  // –ö–æ–≥–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è —Ü–≤–µ—Ç –∏–≥—Ä–æ–∫–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ–º —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  useEffect(() => {
    if (playerColor === 'b' && game.turn() === 'w') {
      // –ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª —á–µ—Ä–Ω—ã–µ, –∑–Ω–∞—á–∏—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –±–µ–ª—ã–º–∏
      makeComputerMove();
    }
  }, [playerColor, game.turn()]);

  const startNewGame = () => {
    const newGame = new Chess();
    setGame(newGame);
    setIsGameOver(false);
    setResult(null);
    setIsThinking(false);
  };

  const makeComputerMove = async () => {
    if (game.isGameOver()) return;
    
    setIsThinking(true);
    
    try {
      // –°–µ—Ä–≤–µ—Ä –Ω–∞ Render, –∫–ª–∏–µ–Ω—Ç –Ω–∞ hardcorechess.org
      const response = await fetch('https://hardcorechess.onrender.com/stockfish-move', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          fen: game.fen(), 
          difficulty: difficulty 
        })
      });
      
      const data = await response.json();
      
      if (data.error) {
        console.error('–û—à–∏–±–∫–∞ Stockfish:', data.error);
        setIsThinking(false);
        return;
      }

      // –ö–æ–º–ø—å—é—Ç–µ—Ä –¥–µ–ª–∞–µ—Ç —Ö–æ–¥
      const computerMove = game.move(data.move);
      if (computerMove) {
        setGame(new Chess(game.fen()));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞ –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        if (game.isGameOver()) {
          setIsGameOver(true);
          if (game.isCheckmate()) {
            setResult(playerColor === 'w' ? '–ü–æ–±–µ–¥–∞ —á–µ—Ä–Ω—ã—Ö!' : '–ü–æ–±–µ–¥–∞ –±–µ–ª—ã—Ö!');
          } else if (game.isDraw()) {
            setResult('–ù–∏—á—å—è!');
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:', error);
    } finally {
      setIsThinking(false);
    }
  };

  const handleMove = async (sourceSquare, targetSquare) => {
    if (isGameOver || isThinking) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–π —Ö–æ–¥
    if (game.turn() !== playerColor) return false;

    const move = game.move({ from: sourceSquare, to: targetSquare });
    if (!move) return false;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    setGame(new Chess(game.fen()));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
    if (game.isGameOver()) {
      setIsGameOver(true);
      if (game.isCheckmate()) {
        setResult(playerColor === 'w' ? '–ü–æ–±–µ–¥–∞ –±–µ–ª—ã—Ö!' : '–ü–æ–±–µ–¥–∞ —á–µ—Ä–Ω—ã—Ö!');
      } else if (game.isDraw()) {
        setResult('–ù–∏—á—å—è!');
      }
      return true;
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞, —Ö–æ–¥–∏—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä
    setTimeout(() => {
      makeComputerMove();
    }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX

    return true;
  };

  const changeDifficulty = (newDifficulty) => {
    setDifficulty(newDifficulty);
    startNewGame();
  };

  const changePlayerColor = (color) => {
    setPlayerColor(color);
    startNewGame();
  };

  return (
    <div style={{ textAlign: 'center' }}>
      <button 
        onClick={() => navigate('/')}
        style={{
          position: 'absolute',
          top: '20px',
          left: '20px',
          padding: '10px 20px',
          backgroundColor: '#666',
          color: 'white',
          border: 'none',
          borderRadius: '5px',
          cursor: 'pointer'
        }}
      >
        ‚Üê –ù–∞–∑–∞–¥
      </button>
      
      <h2>ü§ñ –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞</h2>
      
      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        gap: '20px', 
        marginBottom: '20px',
        flexWrap: 'wrap'
      }}>
        <div>
          <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
            –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}/10
          </label>
          <input
            type="range"
            min="1"
            max="10"
            value={difficulty}
            onChange={(e) => changeDifficulty(parseInt(e.target.value))}
            style={{ width: '150px' }}
          />
        </div>
        
        <div>
          <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
            –¶–≤–µ—Ç —Ñ–∏–≥—É—Ä:
          </label>
          <div style={{ display: 'flex', gap: '10px' }}>
            <button
              onClick={() => changePlayerColor('w')}
              style={{
                padding: '8px 16px',
                backgroundColor: playerColor === 'w' ? '#4CAF50' : '#ddd',
                color: playerColor === 'w' ? 'white' : 'black',
                border: 'none',
                borderRadius: '5px',
                cursor: 'pointer'
              }}
            >
              –ë–µ–ª—ã–µ
            </button>
            <button
              onClick={() => changePlayerColor('b')}
              style={{
                padding: '8px 16px',
                backgroundColor: playerColor === 'b' ? '#4CAF50' : '#ddd',
                color: playerColor === 'b' ? 'white' : 'black',
                border: 'none',
                borderRadius: '5px',
                cursor: 'pointer'
              }}
            >
              –ß–µ—Ä–Ω—ã–µ
            </button>
          </div>
        </div>
      </div>
      
      <button
        onClick={startNewGame}
        style={{
          padding: '12px 24px',
          fontSize: '1.1em',
          backgroundColor: '#FF9800',
          color: 'white',
          border: 'none',
          borderRadius: '8px',
          cursor: 'pointer',
          marginBottom: '20px'
        }}
      >
        –ù–æ–≤–∞—è –∏–≥—Ä–∞
      </button>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
      <div style={{ marginBottom: '20px' }}>
        <p><strong>–•–æ–¥:</strong> {game.turn() === 'w' ? '–±–µ–ª—ã—Ö' : '—á–µ—Ä–Ω—ã—Ö'}</p>
        {game.turn() === playerColor ? (
          <p style={{ color: '#4CAF50', fontWeight: 'bold' }}>–í–∞—à —Ö–æ–¥!</p>
        ) : (
          <p style={{ color: '#2196F3', fontWeight: 'bold' }}>
            {isThinking ? '–ö–æ–º–ø—å—é—Ç–µ—Ä –¥—É–º–∞–µ—Ç...' : '–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞'}
          </p>
        )}
      </div>
      
      {/* –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞ */}
      <Chessboard
        position={game.fen()}
        onPieceDrop={handleMove}
        boardWidth={600}
        boardOrientation={playerColor === 'w' ? 'white' : 'black'}
      />
      
      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã */}
      {isGameOver && (
        <div style={{ 
          marginTop: '20px', 
          padding: '15px',
          backgroundColor: '#ffebee',
          borderRadius: '10px',
          color: '#c62828',
          fontWeight: 'bold',
          fontSize: '1.2em'
        }}>
          {result}
        </div>
      )}
      
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isThinking && (
        <div style={{ 
          marginTop: '20px', 
          padding: '10px',
          backgroundColor: '#e3f2fd',
          borderRadius: '8px',
          color: '#1976d2'
        }}>
          –ö–æ–º–ø—å—é—Ç–µ—Ä –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é... ‚è≥
        </div>
      )}
    </div>
  );
};

export default ComputerGame;
